class MainGameMap {
  constructor(config) {
    this.gameObjects = config.gameObjects;
    this.walls = config.walls || {};

    this.lowerImage = new Image();
    this.lowerImage.src = config.lowerSrc;

    this.upperImage = new Image();
    this.upperImage.src = config.upperSrc;
  }

  drawLowerImage(ctx, cameraPerson) {
    ctx.drawImage(
      this.lowerImage,
      utils.withGrid(10.5) - cameraPerson.x,
      utils.withGrid(6) - cameraPerson.y
    );
  }

  drawUpperImage(ctx, cameraPerson) {
    ctx.drawImage(
      this.upperImage,
      utils.withGrid(10.5) - cameraPerson.x,
      utils.withGrid(6) - cameraPerson.y
    );
  }
  isSpaceTaken(currentX, currentY, direction) {
    const { x, y } = utils.nextPosition(currentX, currentY, direction);
    return this.walls[`${x},${y}`] || false;
  }

  mountObjects() {
    Object.values(this.gameObjects).forEach((gameObject) => {
      // NOTE determine if the object should actually mount.
      gameObject.mount(this);
    });
  }
  // when a game object enters the scene, we want to fire off the code addWall
  addWall(x, y) {
    this.walls[`${x},${y}`] = true;
  }

  removeWall(x, y) {
    delete this.walls[`${x},${y}`];
  }
  // if another game object moves, we want to fire this moveWall function
  moveWall(wasX, wasY, direction) {
    this.removeWall(wasX, wasY, direction); // remove a wall from the old position
    const { x, y } = utils.nextPosition(wasX, wasY, direction); // calculate the new position, offset by the direction
    this.addWall(x, y); // added a wall to the new position
  }
}

const data = [
  [1, 1],
  [1, 2],
  [1, 3],
  [1, 4],
  [1, 5],
  [1, 6],
  [1, 7],
  [1, 8],
  [1, 9],
  [1, 10],
  [1, 11],
  [1, 12],
  [1, 13],
  [1, 14],
  [1, 15],
  [1, 16],
  [1, 17],
  [1, 18],
  [1, 19],
  [1, 20],
  [1, 21],
  [1, 22],
  [1, 23],
  [1, 24],
  [1, 25],
  [1, 26],
  [1, 27],
  [1, 28],
  [1, 29],
  [1, 30],
  [2, 1],
  [2, 22],
  [2, 23],
  [2, 30],
  [3, 1],
  [3, 22],
  [3, 23],
  [3, 30],
  [4, 1],
  [4, 4],
  [4, 5],
  [4, 6],
  [4, 7],
  [4, 8],
  [4, 9],
  [4, 12],
  [4, 13],
  [4, 14],
  [4, 15],
  [4, 16],
  [4, 17],
  [4, 18],
  [4, 19],
  [4, 20],
  [4, 21],
  [4, 22],
  [4, 23],
  [4, 24],
  [4, 25],
  [4, 26],
  [4, 27],
  [4, 30],
  [5, 1],
  [5, 4],
  [5, 5],
  [5, 6],
  [5, 7],
  [5, 8],
  [5, 9],
  [5, 12],
  [5, 13],
  [5, 14],
  [5, 15],
  [5, 16],
  [5, 17],
  [5, 18],
  [5, 19],
  [5, 20],
  [5, 21],
  [5, 22],
  [5, 23],
  [5, 24],
  [5, 25],
  [5, 26],
  [5, 27],
  [5, 30],
  [6, 1],
  [6, 4],
  [6, 5],
  [6, 12],
  [6, 13],
  [6, 26],
  [6, 27],
  [6, 30],
  [7, 1],
  [7, 4],
  [7, 5],
  [7, 12],
  [7, 13],
  [7, 26],
  [7, 27],
  [7, 30],
  [8, 1],
  [8, 4],
  [8, 5],
  [8, 8],
  [8, 9],
  [8, 10],
  [8, 11],
  [8, 12],
  [8, 13],
  [8, 14],
  [8, 15],
  [8, 16],
  [8, 17],
  [8, 18],
  [8, 19],
  [8, 22],
  [8, 23],
  [8, 26],
  [8, 27],
  [8, 30],
  [9, 1],
  [9, 4],
  [9, 5],
  [9, 8],
  [9, 9],
  [9, 10],
  [9, 11],
  [9, 12],
  [9, 13],
  [9, 14],
  [9, 15],
  [9, 16],
  [9, 17],
  [9, 18],
  [9, 19],
  [9, 22],
  [9, 23],
  [9, 26],
  [9, 27],
  [9, 30],
  [10, 1],
  [10, 4],
  [10, 5],
  [10, 8],
  [10, 9],
  [10, 22],
  [10, 23],
  [10, 26],
  [10, 27],
  [10, 30],
  [11, 1],
  [11, 4],
  [11, 5],
  [11, 8],
  [11, 9],
  [11, 22],
  [11, 23],
  [11, 26],
  [11, 27],
  [11, 30],
  [12, 1],
  [12, 4],
  [12, 5],
  [12, 8],
  [12, 9],
  [12, 12],
  [12, 13],
  [12, 16],
  [12, 17],
  [12, 18],
  [12, 19],
  [12, 22],
  [12, 23],
  [12, 26],
  [12, 27],
  [12, 30],
  [13, 1],
  [13, 4],
  [13, 5],
  [13, 8],
  [13, 9],
  [13, 12],
  [13, 13],
  [13, 16],
  [13, 17],
  [13, 18],
  [13, 19],
  [13, 22],
  [13, 23],
  [13, 26],
  [13, 27],
  [13, 30],
  [14, 1],
  [14, 4],
  [14, 5],
  [14, 8],
  [14, 9],
  [14, 12],
  [14, 13],
  [14, 18],
  [14, 19],
  [14, 22],
  [14, 23],
  [14, 26],
  [14, 27],
  [14, 30],
  [15, 1],
  [15, 4],
  [15, 5],
  [15, 8],
  [15, 9],
  [15, 12],
  [15, 13],
  [15, 18],
  [15, 19],
  [15, 22],
  [15, 23],
  [15, 26],
  [15, 27],
  [15, 30],
  [16, 1],
  [16, 4],
  [16, 5],
  [16, 8],
  [16, 9],
  [16, 12],
  [16, 13],
  [16, 18],
  [16, 19],
  [16, 22],
  [16, 23],
  [16, 26],
  [16, 27],
  [16, 30],
  [17, 1],
  [17, 4],
  [17, 5],
  [17, 8],
  [17, 9],
  [17, 12],
  [17, 13],
  [17, 18],
  [17, 19],
  [17, 22],
  [17, 23],
  [17, 26],
  [17, 27],
  [17, 30],
  [18, 1],
  [18, 4],
  [18, 5],
  [18, 8],
  [18, 9],
  [18, 12],
  [18, 13],
  [18, 14],
  [18, 15],
  [18, 16],
  [18, 17],
  [18, 18],
  [18, 19],
  [18, 22],
  [18, 23],
  [18, 26],
  [18, 27],
  [18, 30],
  [19, 1],
  [19, 4],
  [19, 5],
  [19, 8],
  [19, 9],
  [19, 12],
  [19, 13],
  [19, 14],
  [19, 15],
  [19, 16],
  [19, 17],
  [19, 18],
  [19, 19],
  [19, 22],
  [19, 23],
  [19, 26],
  [19, 27],
  [19, 30],
  [20, 1],
  [20, 4],
  [20, 5],
  [20, 8],
  [20, 9],
  [20, 22],
  [20, 23],
  [20, 30],
  [21, 1],
  [21, 4],
  [21, 5],
  [21, 8],
  [21, 9],
  [21, 22],
  [21, 23],
  [21, 30],
  [22, 1],
  [22, 4],
  [22, 5],
  [22, 8],
  [22, 9],
  [22, 12],
  [22, 13],
  [22, 14],
  [22, 15],
  [22, 16],
  [22, 17],
  [22, 18],
  [22, 19],
  [22, 20],
  [22, 21],
  [22, 22],
  [22, 23],
  [22, 26],
  [22, 27],
  [22, 30],
  [23, 1],
  [23, 4],
  [23, 5],
  [23, 8],
  [23, 9],
  [23, 12],
  [23, 13],
  [23, 14],
  [23, 15],
  [23, 16],
  [23, 17],
  [23, 18],
  [23, 19],
  [23, 20],
  [23, 21],
  [23, 22],
  [23, 23],
  [23, 26],
  [23, 27],
  [23, 30],
  [24, 1],
  [24, 4],
  [24, 5],
  [24, 20],
  [24, 21],
  [24, 26],
  [24, 27],
  [24, 30],
  [25, 4],
  [25, 5],
  [25, 20],
  [25, 21],
  [25, 26],
  [25, 27],
  [25, 30],
  [26, 4],
  [26, 5],
  [26, 6],
  [26, 7],
  [26, 8],
  [26, 9],
  [26, 10],
  [26, 11],
  [26, 12],
  [26, 13],
  [26, 14],
  [26, 15],
  [26, 16],
  [26, 17],
  [26, 18],
  [26, 19],
  [26, 20],
  [26, 21],
  [26, 22],
  [26, 23],
  [26, 24],
  [26, 25],
  [26, 26],
  [26, 27],
  [26, 30],
  [27, 1],
  [27, 4],
  [27, 5],
  [27, 6],
  [27, 7],
  [27, 8],
  [27, 9],
  [27, 10],
  [27, 11],
  [27, 12],
  [27, 13],
  [27, 14],
  [27, 15],
  [27, 16],
  [27, 17],
  [27, 18],
  [27, 19],
  [27, 20],
  [27, 21],
  [27, 22],
  [27, 23],
  [27, 24],
  [27, 25],
  [27, 26],
  [27, 27],
  [27, 30],
  [28, 1],
  [28, 30],
  [29, 1],
  [29, 30],
  [30, 1],
  [30, 2],
  [30, 3],
  [30, 4],
  [30, 5],
  [30, 6],
  [30, 7],
  [30, 8],
  [30, 9],
  [30, 10],
  [30, 11],
  [30, 12],
  [30, 13],
  [30, 14],
  [30, 15],
  [30, 16],
  [30, 17],
  [30, 18],
  [30, 19],
  [30, 20],
  [30, 21],
  [30, 22],
  [30, 23],
  [30, 24],
  [30, 25],
  [30, 26],
  [30, 27],
  [30, 28],
  [30, 29],
  [30, 30],
];
const obj = {};
const handleObj = (func) => {
  data.forEach((item) => {
    obj[func(...item)] = true;
  });
};

// handleObj((a, b) => a + b);
handleObj(utils.asGridCoord);
// console.log(obj);
window.MainGameMap = {
  DemoRoom: {
    lowerSrc: "/Project_1/links-vorne/images1/maze.png",
    upperSrc: "/Project_1/links-vorne/images1/maze.png",
    gameObjects: {
      hero: new Person({
        isPlayerControlled: true,
        x: utils.withGrid(2),
        y: utils.withGrid(0),
      }), // creeert een nieuw game-object in deze map met de naam hero
      secondPerson: new Person({
        x: utils.withGrid(2),
        y: utils.withGrid(4),
        src: "/Project_1/01-pizza-legends-intro/images/characters/people/npc1.png",
      }), //
    },
    // data: [
    //   [1, 1],
    //   [8, 6],
    //   [7, 7],
    //   [8, 7],
    // ],
    walls: {
      [utils.asGridCoord(1, 1)]: true,
      [utils.asGridCoord(2, 1)]: true,
      [utils.asGridCoord(3, 1)]: true,
      [utils.asGridCoord(4, 1)]: true, // met de brackets maak je zo een dynamic key in javascript, deze geeft een string terug en evalueert deze dan als true of false. In dit geval is het true.
      //dit is de omgevormde string van 8 en 7 keer 16
    },
    // Kitchen: {
    //   lowerSrc: "/Project_1/01-pizza-legends-intro/images/maps/KitchenLower.png",
    //   upperSrc: "/Project_1/01-pizza-legends-intro/images/maps/KitchenUpper.png",
    //   gameObjects: {
    //     thirdPerson: new Person({
    //       x: utils.withGrid(5),
    //       y: utils.withGrid(5),
    //       src: "/Project_1/01-pizza-legends-intro/images/characters/people/npc2.png",
    //     }), // creeert een nieuw game-object in deze map met de naam hero
    //     fourthPerson: new Person({
    //       x: utils.withGrid(2),
    //       y: utils.withGrid(7),
    //       src: "/Project_1/01-pizza-legends-intro/images/characters/people/npc3.png",
    //     }), //
    //   },
    // },
  },
};
